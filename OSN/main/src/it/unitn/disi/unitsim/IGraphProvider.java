package it.unitn.disi.unitsim;

import it.unitn.disi.graph.IndexedNeighborGraph;

/**
 * {@link IGraphProvider} is a base service allowing piecewise access to an
 * underlying, possibly huge graph, without having to load it into memory.
 * 
 * @author giuliano
 */
public interface IGraphProvider {

	/**
	 * @return the number of subgraphs known to this {@link IGraphProvider}, or
	 *         -1 if the underlying graph is infinite (e.g. it's generated by an
	 *         algorithm).
	 */
	public int size();

	/**
	 * The n-th subgraph of the underlying graph, as an
	 * {@link IndexedNeighborGraph}. Node that IDs are mapped from zero to
	 * {@link IndexedNeighborGraph#size()}. The original IDs for the vertices
	 * can be recovered by calling {@link #verticesOf(Integer)}.
	 * 
	 * @param node
	 * @return
	 */
	public abstract IndexedNeighborGraph subgraph(Integer subgraph);

	/**
	 * An array containing the IDs of the vertices which compose the n-th
	 * subgraph of this graph, with their IDs in the ID space of the underlying
	 * graph.
	 * 
	 * @param node
	 *            the id of the vertex, in the ID space of the underlying graph.
	 * @return its neighbors in the underlying graph.
	 */
	public abstract int[] verticesOf(Integer subgraph);

}