#!/bin/bash
#
# Module for common bash functions.
#
# Return values are stored in variable COMMON_RETURN.
#

############################################################### 
#
# Echo replacements.
#
############################################################### 

function err {
    echo -e "$@" >&2
}

function out {
    echo $@
}


############################################################### 
#
# Performs an averaging step using the python analyzer. 
#
# Parameters:
#
# 1 -> file set (.text, .tmp, and .b) containing the averages;
# 2 -> step of the averaging procedure. 
#
############################################################### 

function step_average {
    err Performing averaging step $2 for element $1. >&2
    if [ -e $1.text ] 
    then 
	analyzer -V avg=./$1.text:input=$1.b:step=$2 -t python misc.cli.AverageColumns > $1.tmp
    else
	mv $1.b $1.tmp
    fi
    
    rm -rf $1.text $1.b
    mv $1.tmp $1.text
}

############################################################### 
#
# Builds a colon-separated file list from the results produced
# by an ls command.
#
############################################################### 

function file_list {
    LIST=""
    SEP=${2:-","}
    for i in `ls $1`
    do
	if [ ${LIST} ]
	then
	    LIST=${LIST}${SEP}${i}
	else
	    LIST=$i
	fi
    done

    COMMON_RETURN=$LIST
}

function classpath {
    file_list "$1/*.jar" ":"
    CP=$COMMON_RETURN
}


############################################################### 
#
# Asserts that a file exists. 
#
###############################################################
function assert_exists {
    if [ ! -e $1 ]
    then
	err "File $1 could not be found."
	exit 1
    fi
}


############################################################### 
#
# Tests if all environment variables scripts require have been
# set.
#
############################################################### 
function checkenv {

    analyzer -t python -V to_check=HOME,WORKSPACE_HOME,GRAPHS_HOME,BASH_LIB,RLIB_HOME misc.cli.CheckVar > /dev/null
    
    if [ $? == "1" ]
    then
	err "FAILED."
	exit 1
    fi
}

############################################################### 
#
# Silly helper for checking parameters.
#
############################################################### 

function checkpar {
    if [ $2 -lt $1 ]
    then
	err Incorrect number of arguments -- expected $1 but got $2.
	exit
    fi
}

function check_set {
    if [ -z $2 ]
    then 
	err Mandatory argument $1 is missing. Type $0 -h for help.
	exit 1
    else
	err Parameter $1 is $2.
    fi
}

err "Sourced common.lib."

############################################################### 
#
# Given two folders, creates a shadow copy (linked) from the
# first to the second.
#
############################################################### 
function linktree {
    OS=`uname`

    if [ $OS == "Linux" ]
    then
	cp -lR $1 $2
    elif [ $OS == "Darwin" ]
    then
	gcp -lR $1 $2
    else
	err "Unknown OS $OS."
	exit 1
    fi
}